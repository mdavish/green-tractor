generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String        @id @default(cuid())
  stripeAccountId   String?
  stripeAccountLink String?
  name              String?
  profile           String?
  email             String?       @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  Listing           Listing[]
  // Address fields are optional because Prisma creates the user
  // before the address can be populated. We may consider separating into
  // a separate table in the future.
  addressLine1      String?
  addressLine2      String?
  region            String?
  city              String?
  postalCode        String?
  latitude          Float?
  longitude         Float?
  Offer             Offer[]
  messagesTo        Message[]     @relation("MessageToUser")
  messagesFrom      Message[]     @relation("MessageFromUser")
  OfferUpdates      OfferUpdate[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Listing {
  id                    String   @id @default(cuid())
  title                 String
  listedDate            DateTime
  expirationDate        DateTime
  startingPrice         Float
  startingPriceCurrency String?  @default("USD")
  description           String
  imageUrl              String?
  listingUserId         String
  listingUser           User     @relation(fields: [listingUserId], references: [id], onDelete: Cascade)
  Offer                 Offer[]
}

enum OfferStatus {
  OPEN // The offer has been submitted, but the seller has not yet responded
  REJECTED // The seller has rejected the offer
  COUNTERED // The seller has countered the offer
  ACCEPTED // The offer has been accepted, but payment has not yet been received
  PAID // The offer has been accepted and payment has been received
  CANCELLED // The offer was accepted, but the buyer cancelled the offer
}

model Offer {
  id                 String        @id @default(cuid())
  offerDate          DateTime
  offerMessage       String
  offerPrice         Float
  offerPriceCurrency String?       @default("USD")
  offerUserId        String
  offerUser          User          @relation(fields: [offerUserId], references: [id], onDelete: Cascade)
  listingId          String
  listing            Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  status             OfferStatus   @default(OPEN)
  seen               Boolean?      @default(false)
  OfferUpdates       OfferUpdate[]
}

model OfferUpdate {
  id          String      @id @default(cuid())
  offerId     String
  offer       Offer       @relation(fields: [offerId], references: [id], onDelete: Cascade)
  // The user who made the update (this could be either the buyer or the seller)
  actorUserId String
  actorUser   User        @relation(fields: [actorUserId], references: [id], onDelete: Cascade)
  seen        Boolean?    @default(false)
  updatedAt   DateTime    @default(now())
  newStatus   OfferStatus
  newPrice    Float?
  message     String?
}

model Message {
  id         String   @id @default(cuid())
  toUserId   String
  fromUserId String
  message    String
  sentAt     DateTime
  toUser     User     @relation("MessageToUser", fields: [toUserId], references: [id], onDelete: Cascade)
  fromUser   User     @relation("MessageFromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  seen       Boolean? @default(false)
}
