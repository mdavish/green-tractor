generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  profile       String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Listing       Listing[]
  // Address fields are optional because Prisma creates the user
  // before the address can be populated. We may consider separating into
  // a separate table in the future.
  addressLine1  String?
  addressLine2  String?
  region        String?
  city          String?
  postalCode    String?
  latitude      Float?
  longitude     Float?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Listing {
  id                    String   @id @default(cuid())
  title                 String
  listedDate            DateTime
  expirationDate        DateTime
  startingPrice         Float
  startingPriceCurrency String
  description           String
  imageUrl              String?
  listingUserId         String
  listingUser           User     @relation(fields: [listingUserId], references: [id], onDelete: Cascade)
}
